#!/bin/bash

set -eu


# ==============================================================================
# Functions
# ==============================================================================


# Update Anaconda
anaconda_up() {
  # shellcheck source=/dev/null
  if ! source /usr/local/anaconda3/bin/activate root >/dev/null 2>&1; then
    echo "Anaconda3 not found on system."
    return
  fi

  conda update -n base conda -y
  conda update --prefix /usr/local/anaconda3 anaconda -y 
  conda clean --all -y

  # shellcheck source=/dev/null
  conda deactivate
}


# Update HomeBrew
brew_up() {
  if ! type brew >/dev/null 2>&1; then
    echo "HomeBrew not found on system."
    return
  fi

  brew update
  brew upgrade
  brew cask upgrade
  brew cleanup
}


# Update Dotfiles repo
dotfiles_pull() {
	local packages repo="$HOME/.dotfiles"

  if [[ -d "$repo" ]]; then
    pushd "$repo" >/dev/null 2>&1
    git stash
    git pull
    generate-dotfiles
    git submodule update --init --recursive

    shopt -s nullglob
    packages=(*/)
    for pkg in "${packages[@]}"; do
     stow "$(echo "$pkg" | cut -d '/' -f 1)"
    done

    popd >/dev/null 2>&1
  fi
}


# Download RPMs from GitHub
download_rpms() {
  if type dnf >/dev/null 2>&1; then
    if type localrepo.py >/dev/null 2>&1; then
      localrepo.py
    else
      echo "Can't find localrepo.py, skipping."
      return
    fi
  else
    echo "Skipping RPM updates."
    return
  fi
}


# Update RVM
ruby_up() {
  if ! type rvm >/dev/null 2>&1; then
    echo "No RVM installation found."
    return
  fi

  rvm get stable
  rvm gemset update
  rvm cleanup all
}


# Update OS
opsys() {
  if type softwareupdate >/dev/null 2>&1; then
    sudo softwareupdate -ia
  elif type yum >/dev/null 2>&1; then
    sudo yum update -y
  elif type dnf >/dev/null 2>&1; then
    sudo dnf upgrade -y
  else
    return
  fi
}


usage() {
  echo "update.sh -- Updates various system components."
  echo
  echo "Usage: update -h | -a | [-i $UPDATES]"
  echo
  echo "Options:"
  echo "-h    print help menu and exit"
  echo "-a    perform all updates (default);  implies -i $UPDATES"
  echo "-i    update individual subsystem:"
  echo "      a    Anaconda"
  echo "      b    HomeBrew formulas and casks"
  echo "      d    dotfiles repo"
  echo "      i    pip3 itself"
  echo "      o    operating system"
  echo "      l    local packages (from GitHub)"
  echo "      p    Python $PYVER packages"
  echo "      r    RVM and Ruby gems"
  echo "      s    shell profile/rc dotfiles"
  echo
  exit 0
}


##
## Main
##

UPDATES="abdiloprs"
PYVER="$(python3 -V 2>&1 | grep -Eo '[0-9]\.[0-9]')"

while getopts 'hasui:' flag; do
  case "${flag}" in
    h ) usage ;;
    a ) UPDATES="$UPDATES" ;;
    s ) UPDATES="o" ;;
    u ) UPDATES="bdprs" ;;
    i ) UPDATES="$OPTARG" ;;
    : ) echo "Missing argument: $OPTARG requires an argument" 1>&2 ; exit 1 ;;
    \?) echo "Invalid option: $OPTARG" 1>&2 ; exit 1 ;;
  esac
done


for (( i=0; i<${#UPDATES}; i++ )); do
  update="${UPDATES:$i:1}"
  case "$update" in
    a ) anaconda_up ;;
    b ) brew_up ;;
    d ) dotfiles_pull ;;
    i ) pip3 install --upgrade pip ;;
    o ) opsys ;;
    l ) download_rpms ;;
    p ) pip_upgrade_outdated -3 --verbose ;;
    r ) ruby_up ;;
    s ) generate-dotfiles ;;
    * ) echo "Invalid option: $update" 1>&2 ; exit 1 ;;
  esac
done

echo
exit 0
