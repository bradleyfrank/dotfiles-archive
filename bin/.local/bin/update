#!/usr/bin/env bash

# Update Anaconda
coil() {
  # shellcheck source=/dev/null
  . /usr/local/anaconda3/bin/activate
  conda update -n base conda -y
  conda update --prefix /usr/local/anaconda3 anaconda -y 
  conda clean --all -y
  conda deactivate
}


# Update HomeBrew
steep() {
  brew update
  brew upgrade
  brew cask upgrade
  brew cleanup
}


# Update Dotfiles repo
mydots() {
  pushd "$HOME"/.dotfiles >/dev/null 2>&1 || return 1
  git stash
  git pull
  generate-dotfiles
  git submodule update --init --recursive
  for dir in */; do stow --restow "${dir%/}"; done
  popd >/dev/null 2>&1 || return 1
}


# Update user Python packages
pup() {
  pip_upgrade_outdated -2 --user --verbose
  pip_upgrade_outdated -3 --user --verbose
}


# Update RVM
shine() {
  rvm get stable
  rvm gemset update
  rvm cleanup all
}


# Show program help/usage
usage() {
  echo "update -- UPDATE ALL THE THINGS!"
  echo
  echo "Usage: update -[option]"
  echo
  echo "options:"
  echo "  -h    print help menu and exit"
  echo "  -a    update Anaconda and Conda packages"
  echo "  -b    update HomeBrew formulas and casks"
  echo "  -d    update dotfiles repo and restow packages"
  echo "  -p    Update user Python packages"
  echo "  -r    update RVM and Ruby gems"
  echo "  -s    regenerate bash_profile and bashrc"
  echo "  -y    download and update external RPMs (linux only)"
  echo
  exit 0
}

error() {
  echo "Invalid option. Usage: update [$OPTIONS]"
  exit 0
}


# Define all options
OPTIONS="habdprsy"

while getopts ":${OPTIONS}" flag; do
  case "${flag}" in
    h ) usage ;;
    a ) coil ;;
    b ) steep ;;
    d ) mydots ;;
    p ) pup ;;
    r ) shine ;;
    s ) generate-dotfiles ;;
    y ) yum2 ;;
    \?) error ;;
    * ) error ;;
  esac
done

if [[ $OPTIND -eq 1 ]]; then error; fi

echo
exit 0
