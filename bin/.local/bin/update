#!/bin/bash

set -eu

PIPS=("pip" "pip2" "pip3")
UPDATES="abdiprslm"


# ==============================================================================
# Functions
# ==============================================================================


# Update Anaconda
anaconda_up() {
  echo ""
  echo "__ Updating Anaconda __"

  # shellcheck source=/dev/null
  if ! source /usr/local/anaconda3/bin/activate root >/dev/null 2>&1; then
    echo "Anaconda3 not found on system."
    return
  fi

  conda update -n base conda -y
  conda update --prefix /usr/local/anaconda3 anaconda -y 
  conda clean --all -y

  # shellcheck source=/dev/null
  source deactivate
}


# Update HomeBrew
brew_up() {
  echo ""
  echo "__ Updating HomeBrew __"

  if ! type brew >/dev/null 2>&1; then
    echo "HomeBrew not found on system."
    return
  fi

  brew update
  brew upgrade --cleanup
  brew cask upgrade
  brew cleanup
  brew prune
}


# Update Dotfiles repo
dotfiles_pull() {
  echo ""
  echo "__ Updating Dotfiles Repo __"

	local packages repo="$HOME/.dotfiles"

  if [[ -d "$repo" ]]; then
    pushd "$repo" >/dev/null 2>&1
    git stash
    generate-dotfiles
    git submodule update --init --recursive

    shopt -s nullglob
    packages=(*/)
    for pkg in "${packages[@]}"; do
     stow "$(echo "$pkg" | cut -d '/' -f 1)"
    done

    popd >/dev/null 2>&1
  fi
}


# Update RVM
ruby_up() {
  echo ""
  echo "__ Updating RVM & Gems __"

  if ! type rvm >/dev/null 2>&1; then
    echo "No RVM installation found."
    return
  fi

  rvm get stable
  rvm gemset update
  rvm cleanup all
}


# Update Python packages
py_up() {
  echo ""
  echo "__ Updating Python __"

  for pip in "${PIPS[@]}"
  do
    if ! type "$pip" >/dev/null 2>&1; then
      echo "Version $pip not found."
      break
    fi

    "$pip" freeze --user --disable-pip-version-check | grep -v '^\-e' | cut -d = -f 1 | xargs -n 1 "$pip" install -U --user
  done
}


# Update Pip
pip_up() {
  echo ""
  echo "__ Updating Pip __"

  for pip in "${PIPS[@]}"
  do
    if ! type "$pip" >/dev/null 2>&1; then
      echo "Version $pip not found."
      break
    fi

    "$pip" install -U pip
  done
}


# Update MacOS
macos() {
  echo ""
  echo "__ Updating MacOS __"

  # Bail if not present
  if ! type softwareupdate >/dev/null 2>&1; then
    echo "MacOS system not detected."
    return
  fi

  sudo softwareupdate -ia
}


# Update Linux OS
linux_os() {
  echo ""
  echo "__ Updating Linux __"

  local pkg_manager

  # Find package manager
  if type yum >/dev/null 2>&1; then
    pkg_manager="yum"
  elif type dnf >/dev/null 2>&1; then
    pkg_manager="dnf"
  else
    echo "No Linux package manager found."
    return
  fi

  sudo "$pkg_manager" upgrade -y
}


usage() {
  echo "update.sh -- Updates various system environments."
  echo ""
  echo "Usage: update -h | -a | -s | -u | [-i $UPDATES]"
  echo ""
  echo "Options:"
  echo "-h    print help menu and exit"
  echo "-a    perform all updates (default);  implies -i $UPDATES"
  echo "-s    system updates only;            implies -i lm"
  echo "-u    user updates only;              implies -i bdprs"
  echo "-i    update individual subsystem:"
  echo "      a    Anaconda"
  echo "      b    HomeBrew"
  echo "      d    Dotfiles"
  echo "      i    Pip"
  echo "      p    Python"
  echo "      r    Ruby"
  echo "      s    Shell"
  echo "      -------------"
  echo "      l    Linux OS"
  echo "      m    Mac OS"
  echo ""
  exit 0
}


# ==============================================================================
# Main
# ==============================================================================

while getopts 'hasui:' flag; do
  case "${flag}" in
    h ) usage ;;
    a ) UPDATES="$UPDATES" ;;
    s ) UPDATES="ml" ;;
    u ) UPDATES="bdprs" ;;
    i ) UPDATES="$OPTARG" ;;
    : ) echo "Missing argument: $OPTARG requires an argument" 1>&2 ; exit 1 ;;
    \?) echo "Invalid option: $OPTARG" 1>&2 ; exit 1 ;;
  esac
done


for (( i=0; i<${#UPDATES}; i++ )); do
  update="${UPDATES:$i:1}"
  case "$update" in
    a ) anaconda_up ;;
    b ) brew_up ;;
    d ) dotfiles_pull ;;
    i ) pip_up ;;
    p ) py_up ;;
    r ) ruby_up ;;
    s ) generate-dotfiles ;;
    l ) linux_os ;;
    m ) macos ;;
    * ) echo "Invalid option: $update" 1>&2 ; exit 1 ;;
  esac
done

echo ""
exit 0
