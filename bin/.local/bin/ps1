#!/bin/bash

LAST_EXIT_STATUS="$?"

bgRed="\[\e[48;5;52m\]"
bgLightGray="\[\e[48;5;059m\]"

fgLightCyan="\[\e[38;5;6m\]"
fgCyan="\[\e[38;5;39m\]"
fgLightGray="\[\e[38;5;059m\]"
fgSkyBlue="\[\e[38;5;117m\]"
#fgMedRed="\[\e[38;5;1m\]"
fgBrightGreen="\[\e[38;5;148m\]"
fgBrightRed="\[\e[38;5;196m\]"
fgOrange="\[\e[38;5;208m\]"
fgYellow="\[\e[38;5;220m\]"
fgLightPurple="\[\e[38;5;213m\]"
#fgBrightOrange="\[\e[38;5;214m\]"
#fgLightGray="\[\e[38;5;240m\]"
fgMedGray="\[\e[38;5;245m\]"
#fgDarkGray="\[\e[38;5;250m\]"
fgWhite="\[\e[38;5;256m\]"

mkBold="\[\e[1m\]"
ResetColor="\[\e[0;0m\]"

ThinArrow=$'\UE0B1'
Triangle=$'\UE0B0'
GitGlyph=$'\uE0A0'

div="${ThinArrow}"

##
## FUNCTIONS
##

build_cwd() {
  local wd pathdirs numdirs shortpwd

  # replace $HOME with tilde
  wd="$(printf '%s' "$PWD" | sed "s|^${HOME}|~|")"
  # replace "/" with spaces to split into array
  pathdirs=(${wd//// })
  # count array size to get number of directories
  numdirs="${#pathdirs[@]}"
  # decrement array size to avoid parsing cwd below
  ((numdirs--))

  shortpwd=""

  if [[ "$numdirs" -gt 0 ]]; then
    for ((i=0;i<"${numdirs}";i++)); do
      shortpwd="${shortpwd}${pathdirs[$i]:0:1}/"
    done
  fi

  # add the cwd back in since we want the full name
  shortpwd="${shortpwd}${mkBold}${pathdirs[-1]}"
  current_dir="${bgLightGray}${fgWhite} ${shortpwd}${ResetColor}"
}

build_git_prompt() {
  local prefix metadata
  local git_remote="" git_changes=""
  local clean branch state remote staged conflicts changed untracked stashed

  # call external script (probably in local bin folder)
  readarray -t git_status <<< "$(parse-git-status)"
  if [[ ${git_status[*]} == "" ]]; then
    return 1
  fi

  clean=${git_status[0]}
  branch="${git_status[1]}"
  state="${git_status[2]}"
  remote="${git_status[3]}"
  #upstream="${git_status[4]}"
  staged=${git_status[5]}
  conflicts=${git_status[6]}
  changed=${git_status[7]}
  untracked=${git_status[8]}
  stashed=${git_status[9]}


  # set the push/pull indicators
  if [[ "$remote" =~ BEHIND ]]; then
    git_remote=" ${fgBrightRed}↓${remote//_BEHIND_/}"
  elif [[ "$remote" =~ AHEAD ]]; then
    git_remote=" ${fgLightCyan}↑${remote//_AHEAD_/}"
  fi


  # set the various repo indictors
  if [[ "$clean" -eq 1 ]]; then
    local _staged="" _conflicts="" _changed="" _untracked="" _stashed=""

    if [[ $staged -gt 0 ]]; then
      _staged=" ${fgOrange}⋮${staged}"
    fi

    if [[ $conflicts -gt 0 ]]; then
      _conflicts=" ${fgBrightRed}✗${conflicts}"
    fi

    if [[ $changed -gt 0 ]]; then
      _changed=" ${fgYellow}𝛥${changed}"
    fi

    if [[ $untracked -gt 0 ]]; then
      _untracked=" ${fgLightPurple}+${untracked}"
    fi

    if [[ $stashed -gt 0 ]]; then
      _stashed=" ${fgCyan}⚑${stashed}"
    fi

    # combine all the changes into one string
    git_changes="${_staged}${_conflicts}${_changed}${_untracked}${_stashed}"
    git_changes="${bgLightGray}${git_changes}${ResetColor}"

    # branch is dirty, color it yellow
    prefix="${bgLightGray}${fgYellow} ${GitGlyph} ${branch}${ResetColor}"
  else
    # branch is clean, color is green
    prefix="${bgLightGray}${fgBrightGreen} ${GitGlyph} ${branch}${ResetColor}"
  fi

  # combine remote info with local changes
  metadata="${git_remote}${git_changes}${bgLightGray} ${ResetColor}"

  # build final git prompt
  ps1_git_prompt="${prefix}${bgLightGray}${state}${metadata}${ResetColor}"
}


##
## HOSTNAME
##
if [[ -n "$SSH_CONNECTION" ]]; then
  # only show hostname on remote hosts
  _div="${bgLightGray}${fgWhite}${div}${ResetColor}"
  hostname="${bgLightGray}${fgOrange} \\h ${ResetColor}${_div}"
else
  hostname=""
fi


##
## DATE
##
_div="${bgLightGray}${fgWhite}${div}${ResetColor}"
date="${bgLightGray} ${fgSkyBlue}$(date +'%b-%d %H:%M:%S') ${ResetColor}${_div}"


##
## CWD
##
build_cwd


##
## GIT STATUS
##
_div=""
ps1_git_prompt="${bgLightGray} ${ResetColor}"

if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  if build_git_prompt; then
    _div="${bgLightGray}${fgWhite} ${div}${ResetColor}"
  fi
fi

ps1_git_prompt="${_div}${ps1_git_prompt}"


##
## VIRTUAL ENV
##
if [[ -n $CONDA_DEFAULT_ENV ]]; then
  _div="${bgLightGray}${fgWhite}${div}${ResetColor}"
  _env="${bgLightGray}${fgOrange} ${CONDA_DEFAULT_ENV} ${ResetColor}"
  ps1_env_prompt="${_div}${_env}"
else
  ps1_env_prompt=""
fi


##
## EXIT STATUS
##
if [[ $LAST_EXIT_STATUS -eq 0 ]]; then
  exit_status=""
else
  _div="${bgRed}${fgLightGray}${Triangle}${ResetColor}"
  _exit="${bgRed}${fgWhite} ${LAST_EXIT_STATUS} ${ResetColor}"
  exit_status="${_div}${_exit}"
fi


##
## PS1
##
_system="${hostname}${date}"
_user="${current_dir}${ps1_git_prompt}${ps1_env_prompt}"
_shell="${exit_status}"
_suffix="${fgMedGray}${Triangle}${ResetColor} "

export PS1="${_system}${_user}${_shell}${_suffix}"
