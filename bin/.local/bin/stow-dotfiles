#!/usr/bin/env bash

# formats error messages and quits
error() {
  printf "[ERROR] %s\n" "$1" 1>&2
  exit 1
}

# find all directories excluding ".git"
get_dirs() {
  find . \
    -maxdepth "$1" -mindepth "$2" -type d \
    -not -name ".git" -not -path "*/.git/*" \
    -printf "%f\n"
}

# stows all packages in dotfiles repo
stow_repo() {
  pushd "$1" &>/dev/null || error "No dotfiles directory."

  if [[ -e ".git" ]]; then
    # ensure git repo is up-to-date
    git stash || error "Unable to stash changes."
    git checkout master || error "Couldn't checkout master branch."
    git pull origin || error "Couldn't pull latest changes from origin."
  fi

  command_stow --restow
  remove_broken_symlinks

  popd &>/dev/null || error "Cannot return to original directory."
}

# wrapper for stow command
command_stow() {
  local packages
  readarray -t packages < <( get_dirs 1 1 )
  if ! command stow --no-folding "$@" --target "$HOME" "${packages[@]}"
  then
    error "Stow returned an error."
  fi
}

# removes broken symlinks from package's file paths
remove_broken_symlinks() {
  local dir file_to_rm

  while read -r dir; do
    while read -r file_to_rm; do
      command rm -f "$file_to_rm"
      echo "Deleted bogus link: $file_to_rm"
    done < <( chkstow --target="$HOME/$dir" --badlinks | sed -rn 's/^Bogus link: (\/.+)/\1/p' )
  done < <( get_dirs 2 2 )
}

# replaces existing dotfiles with repo's dotfiles
adopt_and_replace() {
  pushd "$1" &>/dev/null || error "No dotfiles directory."

  if ! git checkout -B backup-"$(date --iso-8601=seconds | tr -d ':')"
  then
    error "Could not create backup branch."
  fi

  command_stow --adopt

  git add -A
  if git commit --dry-run &>/dev/null; then
    git commit -m "Backing up dotfiles."
  fi

  popd &>/dev/null || error "Cannot return to original directory."
}

main() {
  # don't backup or stow Nextcloud dotfiles by default
  local backup_dotfiles=1
  local stow_nc_dotfiles=1

  # dotfile directories
  local dotfiles_dir="$HOME"/.dotfiles
  local nc_dotfiles_dir="$HOME"/Nextcloud/Configs/dotfiles

  while getopts ':be' flag; do
    case "${flag}" in
      b ) backup_dotfiles=0 ;;
      e ) stow_nc_dotfiles=0 ;;
      \?) error "Incorrect argument $OPTARG." ;;
      : ) error "Missing argument." ;;
      * ) error "Unknown argument $OPTARG." ;;
    esac
  done

  [[ "$backup_dotfiles" -eq 0 ]] && adopt_and_replace "$dotfiles_dir"
  stow_repo "$dotfiles_dir"
  [[ "$stow_nc_dotfiles" -eq 0 ]] && stow_repo "$nc_dotfiles_dir"
}

main "$@"
exit 0
