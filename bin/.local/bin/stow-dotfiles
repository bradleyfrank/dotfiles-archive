#!/usr/bin/env bash

set -eu

# formats error messages and quits
error() {
  printf "[ERROR] %s\n" "$1"
  exit 1
}

# find all directories excluding ".git"
get_dirs() {
  find . -maxdepth "$1" -mindepth "$2" -type d -not -path "./.git/*" -printf "%f\n"
}

# stows a package
_stow() {
  local packages
  readarray -t packages < <( get_dirs 1 1 )
  command stow --no-folding --target "$HOME" "$@" "${packages[@]}"
}

# finds all broken symlinks in a given directory
find_broken_symlinks() {
  chkstow --target="$1" --badlinks | sed -rn 's/^Bogus link: (\/.+)/\1/p'
}

# removes broken symlinks
remove_broken_symlinks() {
  while read -r dir; do
    while read -r file_to_rm; do
      rm "$file_to_rm"
      echo "Deleted bogus link: $file_to_rm"
    done < <( find_broken_symlinks "$HOME/$dir" )
  done < <( get_dirs 2 2 )
}


# don't backup by default
__backup=1

# don't stow Nextcloud dotfiles by default
__nc_dotfiles=1

# set date for naming backup branch
__date="$(date --iso-8601=seconds | tr -d ':')"

# dotfile directories
__home_dotfiles_dir="$HOME"/.dotfiles
__nc_dotfiles_dir="$HOME"/Nextcloud/Configs/dotfiles

while getopts ':be' flag; do
  case "${flag}" in
    b ) __backup=0 ;;
    e ) __nc_dotfiles=0 ;;
    \?) error "Unknown argument." ;;
    * ) error "Unknown argument." ;;
  esac
done


# change directory to dotfiles
pushd "$__home_dotfiles_dir" &>/dev/null || error "No dotfiles directory."

# make a backup of existing dotfiles
if [[ "$__backup" -eq 0 ]]; then
  # create a new backup branch
  git checkout -B "backup-${__date}" || error "Could not create backup branch."

  # adopt all dotfiles so they become available for stowing
  _stow --adopt || error "Stow returned an error."

  # add any new files
  git add -A || error "Could not add files to git repo."

  # only commit if there are changes
  if git commit --dry-run &>/dev/null; then
    git commit -m "Backing up dotfiles for ${__date}."
  fi
fi

# stash any active work
git stash || error "Unable to stash changes."

# ensure master branch is checked out
git checkout master || error "Couldn't checkout master branch."

# pull the latest changes
git pull origin || error "Couldn't pull latest changes from origin."

# update all submodules
git submodule update --init --recursive || error "Problem updating submodules."

# stow all packages
_stow --restow || error "Stow returned an error."

# cleanup
remove_broken_symlinks

# all done
popd &>/dev/null || error "Couldn't return to original directory."


if [[ "$__nc_dotfiles" -eq 0 ]]; then
  # change directory to Nextcloud dotfiles
  pushd "$__nc_dotfiles_dir" &>/dev/null || error "No Nextcloud dotfiles directory."

  # stow all packages
  _stow --restow || error "Stow returned an error."

  # cleanup
  remove_broken_symlinks

  # all done
  popd &>/dev/null || error "Couldn't return to original directory."
fi


exit 0
