#!/bin/bash

LAST_EXIT_STATUS="$?"

fgRed="\[\033[0;31m\]"
fgGreen="\[\033[0;32m\]"
fgYellow="\[\033[0;33m\]"
fgBlue="\[\033[0;34m\]"
fgMagenta="\[\033[0;35m\]"
fgTeal="\[\033[0;36m\]"
fgWhite="\[\033[0;37m\]"
ResetColor="\[\033[0;0m\]"

# elements of the PS1
prefix=">>"
suffix=" "
host_name="${fgBlue}(\h)${ResetColor} "
_cwd="${fgYellow}\w${ResetColor}"
ps1_git_prompt=""
ps1_env_prompt=""


build_git_prompt() {
  local git_status git_prompt git_remote="" git_changes="" git_upstream=""
  local clean branch state remote upstream staged conflicts changed untracked stashed

  # import raw git status parse results
  readarray -t git_status <<< "$(parse-git-status)"

  clean=${git_status[0]}
  branch="${git_status[1]}"
  state="${git_status[2]}"
  remote="${git_status[3]}"
  upstream="${git_status[4]}"
  staged=${git_status[5]}
  conflicts=${git_status[6]}
  changed=${git_status[7]}
  untracked=${git_status[8]}
  stashed=${git_status[9]}


  # build the git push/pull prompt
  if [[ "$remote" =~ BEHIND ]]; then
    git_remote="↓$(echo $remote | sed 's/_BEHIND_//g')|"
  elif [[ "$remote" =~ AHEAD ]]; then
    git_remote="↑$(echo $remote | sed 's/_AHEAD_//g')|"
  fi


  # build the changes prompt
  if [[ "$clean" -eq 1 ]]; then
    local _staged="" _conflicts="" _changed="" _untracked="" _stashed=""

    if [[ $staged -gt 0 ]]; then
      _staged="${fgMagenta}⋮${staged}${ResetColor}|"
    fi

    if [[ $conflicts -gt 0 ]]; then
      _conflicts="${fgRed}✗${conflicts}${ResetColor}|"
    fi

    if [[ $changed -gt 0 ]]; then
      _changed="${fgYellow}+${changed}${ResetColor}|"
    fi

    if [[ $untracked -gt 0 ]]; then
      _untracked="${fgWhite}…${untracked}${ResetColor}|"
    fi

    if [[ $stashed -gt 0 ]]; then
      _stashed="${fgBlue}⚑${stashed}${ResetColor}|"
    fi

    # combine the stats into one string
    git_changes="${_staged}${_conflicts}${_changed}${_untracked}${_stashed}"
  fi


  # add git push/pull status
  git_prompt="${git_remote}${git_changes}"

  # insert space if non-empty
  if [[ "$git_prompt" != "" ]]; then
    git_prompt=$(echo " $git_prompt")
  fi

  # remove the trailing pipe character
  git_prompt="${git_prompt%|*}"

  # replace pipes with a colorized version
  git_prompt=$(echo "${git_prompt}" | sed 's:|:\\[\\033[2;37m\\]|\\[\\033[0;0m\\]:g')

  # add git branch info
  git_prompt=" ${fgGreen}${branch}${state}${ResetColor}${git_prompt}"

  # build final ps1 git prompt
  ps1_git_prompt=" ${fgWhite}on${ResetColor}${git_prompt}"
}


if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  build_git_prompt
fi


if [[ ! -z $CONDA_DEFAULT_ENV ]]; then
  _env_name="${fgTeal}${CONDA_DEFAULT_ENV}${ResetColor}"
  ps1_env_prompt=" ${fgWhite}in${ResetColor} ${_env_name}"
fi


if [[ $LAST_EXIT_STATUS -eq 0 ]]; then
  prefix="${fgWhite}${prefix}${ResetColor} "
else
  prefix="${fgRed}${prefix}${ResetColor} "
fi


if [[ "$(uname -n)" =~ local ]]; then
  host_name=""
fi


PS1="${prefix}${host_name}${_cwd}${ps1_git_prompt}${ps1_env_prompt}${suffix}"
