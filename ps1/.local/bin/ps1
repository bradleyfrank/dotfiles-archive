#!/usr/bin/env bash

# Capture the exit status from the last command
LAST_EXIT_STATUS="$?"

# =============================================================================
# GLOBAL GLYPHS
# -----------------------------------------------------------------------------

ThinArrow=$'\uE0B1'
Triangle=$'\uE0B0'
Branch1=$'\uE0A0'
Hash=$'\u2A33'
Cross=$'\u2A2F'
Matrix=$'\u22B9'
VirticalDots="⋮"
CursiveX="✗"
MultiplyX="✕"
Delta="𝛥"
NormalPlus="+"
Flag="⚑"
Checkmark="✓"
Circle="●"

# =============================================================================
# GLOBAL STYLING
# -----------------------------------------------------------------------------

mkBold="\[\e[1m\]"
ResetColor="\[\e[0;0m\]"

# =============================================================================
# GLOBAL COLORS
# -----------------------------------------------------------------------------

bg_LightSeaGreen="\[\e[48;5;37m\]"
bg_DarkRed="\[\e[48;5;52m\]"
bg_SlateBlue3="\[\e[48;5;61m\]"
bg_SteelBlue1="\[\e[48;5;75m\]"
bg_Grey35="\[\e[48;5;240m\]"
bg_Grey54="\[\e[48;5;245m\]"

fg_Lime="\[\e[38;5;10m\]"
fg_White="\[\e[38;5;15m\]"
fg_LightSeaGreen="\[\e[38;5;37m\]"
fg_SlateBlue3="\[\e[38;5;61m\]"
fg_SteelBlue1="\[\e[38;5;75m\]"
fg_Red1="\[\e[38;5;196m\]"
fg_DarkOrange="\[\e[38;5;208m\]"
fg_Orange1="\[\e[38;5;214m\]"
fg_Orchid1="\[\e[38;5;213m\]"
fg_Gold1="\[\e[38;5;220m\]"
fg_Grey35="\[\e[38;5;240m\]"
fg_Grey54="\[\e[38;5;245m\]"

# =============================================================================
# INDIVIDUAL STYLING
# -----------------------------------------------------------------------------

g_div=$Triangle
g_prompt="${Triangle} "
g_exitPrompt="${Triangle} "

c_hostname_bg=$bg_SlateBlue3
c_hostname_fg=$fg_White
c_hostname_div_fg=$fg_SlateBlue3

c_date_bg=$bg_SteelBlue1
c_date_fg=$fg_White
c_date_div_fg=$fg_SteelBlue1

c_cwd_bg=$bg_Grey54
c_cwd_fg=$fg_White
c_cwd_div_fg=$fg_Grey54

c_git_bg=$bg_Grey35
c_gitDirty_fg=$fg_Orange1
c_gitClean_fg=$fg_Lime
c_git_div_fg=$fg_Grey35

c_venv_bg=$bg_LightSeaGreen
c_venv_fg=$fg_White
c_venv_div_fg=$fg_LightSeaGreen

c_prompt_bg=""
c_error_bg=$bg_DarkRed
c_error_fg=$fg_White

g_gitBranch=$Branch1
g_gitPull="↓"
g_gitPush="↑"
g_gitStaged=$Circle
g_gitConflict=$CursiveX
g_gitChanged=$Delta
g_gitUntracked=$NormalPlus
g_gitStashed=$Flag

c_gitPull=$fg_SteelBlue1
c_gitPush=$fg_Lime
c_gitStaged=$fg_White
c_gitConflict=$fg_Red1
c_gitChanged=$fg_Gold1
c_gitUntracked=$fg_DarkOrange
c_gitStashed=$fg_Orchid1


# =============================================================================
# FUNCTIONS
# -----------------------------------------------------------------------------

build_cwd() {
  local div working_dir pathdirs numdirs shortpwd=""

  # replace $HOME with tilde; replace slashes with newlines
  working_dir="$(echo "$PWD" | sed "s|^${HOME}|~|" | sed "s|/|\n|g")"
  # split pwd on newlines into an array
  #     (can't use the -d option; requires Bash > 4.4)
  readarray -t pathdirs <<< "$working_dir"
  # count array size to get number of directories
  numdirs="${#pathdirs[@]}"
  # decrement array size to avoid parsing cwd (which is used later)
  ((numdirs--))

  # iterate through directories to get the first letter of each directory name
  if [[ "$numdirs" -gt 0 ]]; then
    for ((i=0;i<"${numdirs}";i++)); do
      shortpwd="${shortpwd}${pathdirs[$i]:0:1}/"
    done
  fi

  # add the cwd back in so it's shown with a full name
  shortpwd="${shortpwd}${mkBold}${pathdirs[$numdirs]}"
  current_dir="${c_cwd_bg}${c_cwd_fg} ${shortpwd} ${ResetColor}"

  previous_bg=$c_cwd_div_fg
}


build_date() {
  local div

  div="${c_date_div_fg}${c_cwd_bg}${g_div}${ResetColor}"
  date="${c_date_bg} ${c_date_fg}$(date +'%b-%d %H:%M:%S') ${ResetColor}${div}"
}


build_exitstatus() {
  local div status

  exit_status=""

  if [[ $LAST_EXIT_STATUS -ne 0 ]]; then
    div="${c_error_bg}${previous_bg}${g_exitPrompt}${ResetColor}"
    status="${c_error_bg}${c_error_fg}${LAST_EXIT_STATUS}"
    exit_status="${div}${status} ${ResetColor}"
  fi
}


build_git() {
  local div=""

  ps1_git_prompt=""

  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    if build_git_prompt; then
      div="${c_git_bg}${previous_bg}${g_div}${ResetColor}"
      previous_bg=$c_git_div_fg
    fi
  fi

  ps1_git_prompt="${div}${ps1_git_prompt}"
}


build_git_prompt() {
  local prefix metadata
  local git_ahead="" git_behind="" git_remote="" git_changes=""
  local clean branch state remote staged conflicts changed untracked stashed

  # call external script (probably in local bin folder)
  readarray -t git_status <<< "$(parse-git-status)"
  if [[ ${git_status[*]} == "" ]]; then
    return 1
  fi

  clean="${git_status[0]}"
  branch="${git_status[1]}"
  state="${git_status[2]}"
  remote="${git_status[3]}"
  upstream="${git_status[4]}"
  staged="${git_status[5]}"
  conflicts="${git_status[6]}"
  changed="${git_status[7]}"
  untracked="${git_status[8]}"
  stashed="${git_status[9]}"


  # set the push/pull indicators
  if [[ "$remote" =~ BEHIND ]]; then
    git_behind=" ${c_gitPull}${g_gitPull}${remote//_BEHIND_/}"
  fi

  if [[ "$remote" =~ AHEAD ]]; then
    git_ahead=" ${c_gitPush}${g_gitPush}${remote//_AHEAD_/}"
  fi

  git_remote="${git_behind}${git_ahead}"

  # set the various repo indictors
  if [[ "$clean" -eq 1 ]]; then
    local _staged="" _conflicts="" _changed="" _untracked="" _stashed=""

    if [[ $staged -gt 0 ]]; then
      _staged=" ${c_gitStaged}${g_gitStaged}${staged}"
    fi

    if [[ $conflicts -gt 0 ]]; then
      _conflicts=" ${c_gitConflict}${g_gitConflict}${conflicts}"
    fi

    if [[ $changed -gt 0 ]]; then
      _changed=" ${c_gitChanged}${g_gitChanged}${changed}"
    fi

    if [[ $untracked -gt 0 ]]; then
      _untracked=" ${c_gitUntracked}${g_gitUntracked}${untracked}"
    fi

    if [[ $stashed -gt 0 ]]; then
      _stashed=" ${c_gitStashed}${g_gitStashed}${stashed}"
    fi

    # combine all the changes into one string
    git_changes="${_staged}${_conflicts}${_changed}${_untracked}${_stashed}"
    git_changes="${c_git_bg}${git_changes}${ResetColor}"

    # branch is dirty, color it yellow
    prefix="${c_git_bg}${c_gitDirty_fg} ${g_gitBranch} ${branch}${ResetColor}"
  else
    # branch is clean, color is green
    prefix="${c_git_bg}${c_gitClean_fg} ${g_gitBranch} ${branch}${ResetColor}"
  fi

  # combine remote info with local changes
  metadata="${git_remote}${git_changes}${c_git_bg} ${ResetColor}"

  # build final git prompt
  ps1_git_prompt="${prefix}${c_git_bg}${state}${metadata}${ResetColor}"
}


build_hostname() {
  local div
  local c_hostname="${c_hostname_bg}${c_hostname_fg}"
  local c_div="${c_date_bg}${c_hostname_div_fg}"
  
  hostname=""

  if [[ -n "$SSH_CONNECTION" ]] && [[ -z "$TMUX" ]]; then
    div="${c_div}${g_div}${ResetColor}"
    hostname="${c_hostname} \\h ${ResetColor}${div}"
  fi
}


build_venv() {
  local div env

  ps1_env_prompt=""

  if [[ -n $CONDA_DEFAULT_ENV ]]; then
    div="${c_venv_bg}${previous_bg}${g_div}${ResetColor}"
    env="${c_venv_bg}${c_venv_fg} ${CONDA_DEFAULT_ENV} ${ResetColor}"
    ps1_env_prompt="${div}${env}"
    previous_bg=$c_venv_div_fg
  fi
}


# =============================================================================
# MAIN
# -----------------------------------------------------------------------------

# Save previous background color for dividers
previous_bg=""

build_hostname
build_date
build_cwd
build_git
build_venv
build_exitstatus

_system="${hostname}${date}"
_user="${current_dir}${ps1_git_prompt}${ps1_env_prompt}"
_shell="${exit_status}"
_suffix="${c_prompt_bg}${previous_bg}${g_prompt}${ResetColor}"

export PS1="${_system}${_user}${_shell}${_suffix}"
