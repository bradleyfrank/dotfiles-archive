#!/usr/bin/env bash

#
# Instructions for use:
#
# (1) Add to ~/.bashrc ...
# . /path/to/ps1
# export PROMPT_COMMAND=__my_prompt
#
# (2) Use a powerline font for the terminal
# https://github.com/powerline/fonts
#
# (3) Current color selections adapted for Solarized Light
# https://ethanschoonover.com/solarized/
#


# =============================================================================
# USER SETTINGS
# -----------------------------------------------------------------------------

# (1) always show hostname (0) only show hostname in SSH sessions w/o tmux
show_hostname=0

# customize date (see `man date` for codes)
date_format="%H:%M:%S"

# unstaged (*) and staged (+) changes will be shown
GIT_PS1_SHOWDIRTYSTATE=1

# if something is stashed, then a '$' will be shown
GIT_PS1_SHOWSTASHSTATE=1

# if there are untracked files, then a '%' will be shown
GIT_PS1_SHOWUNTRACKEDFILES=1

# show number of commits ahead/behind (+/-) upstream
GIT_PS1_SHOWUPSTREAM="auto verbose"


# =============================================================================
# SCRIPT SETTINGS
# -----------------------------------------------------------------------------

_true=0
_false=1


# =============================================================================
# ANSI COLOR DEFINITIONS
# -----------------------------------------------------------------------------

#mkBold="\[\e[1m\]"
ResetColor="\[\e[0;0m\]"

# Solarized colors (https://en.wikipedia.org/wiki/Solarized_(color_scheme))
#fg_SolarBase03="\[\e[38;5;234m\]"
#bg_SolarBase03="\[\e[48;5;234m\]"
#fg_SolarBase02="\[\e[38;5;235m\]"
bg_SolarBase02="\[\e[48;5;235m\]"
fg_SolarBase01="\[\e[38;5;240m\]"
bg_SolarBase01="\[\e[48;5;240m\]"
#fg_SolarBase00="\[\e[38;5;241m\]"
#bg_SolarBase00="\[\e[48;5;241m\]"
#fg_SolarBase0="\[\e[38;5;244m\]"
#bg_SolarBase0="\[\e[48;5;244m\]"
fg_SolarBase1="\[\e[38;5;245m\]"
bg_SolarBase1="\[\e[48;5;245m\]"
#fg_SolarBase2="\[\e[38;5;254m\]"
#bg_SolarBase2="\[\e[48;5;254m\]"
#fg_SolarBase3="\[\e[38;5;230m\]"
#bg_SolarBase3="\[\e[48;5;230m\]"
#bg_SolarOrange="\[\e[48;5;166m\]"
#fg_SolarOrange="\[\e[38;5;166m\]"
#bg_SolarRed="\[\e[48;5;160m\]"
fg_SolarRed="\[\e[38;5;160m\]"
#bg_SolarYellow="\[\e[48;5;136m\]"
#fg_SolarYellow="\[\e[38;5;136m\]"
#bg_SolarMagenta="\[\e[48;5;125m\]"
#fg_SolarMagenta="\[\e[38;5;125m\]"
#bg_SolarGreen="\[\e[48;5;64m\]"
#fg_SolarGreen="\[\e[38;5;64m\]"
bg_SolarViolet="\[\e[48;5;61m\]"
fg_SolarViolet="\[\e[38;5;61m\]"
bg_SolarCyan="\[\e[48;5;37m\]"
fg_SolarCyan="\[\e[38;5;37m\]"
bg_SolarBlue="\[\e[48;5;33m\]"
fg_SolarBlue="\[\e[38;5;33m\]"

# Additional colors (https://jonasjacek.github.io/colors/)
fg_Lime="\[\e[38;5;10m\]"
fg_White="\[\e[38;5;15m\]"
#fg_SteelBlue1="\[\e[38;5;75m\]"
#fg_DeepPink4="\[\e[38;5;125m\]"
fg_DarkOrange="\[\e[38;5;208m\]"
#fg_Orange1="\[\e[38;5;214m\]"
#fg_Orchid1="\[\e[38;5;213m\]"
#fg_Gold1="\[\e[38;5;220m\]"


# =============================================================================
# SEGMENT COLORS
# -----------------------------------------------------------------------------

# Hostname segment colors
c_hostname_bg=$bg_SolarViolet
c_hostname_fg=$fg_White
c_hostname_div_fg=$fg_SolarViolet

# Date segment colors
c_date_bg=$bg_SolarBlue
c_date_fg=$fg_White
c_date_div_fg=$fg_SolarBlue

# Working directory colors
c_cwd_bg=$bg_SolarBase1
c_cwd_fg=$fg_White
c_cwd_div_fg=$fg_SolarBase1

# Git segment colors
c_git_bg=$bg_SolarBase01
c_gitDirty_fg=$fg_DarkOrange
c_gitClean_fg=$fg_Lime
c_git_div_fg=$fg_SolarBase01

# Virtual environment segment colors
c_venv_bg=$bg_SolarCyan
c_venv_fg=$fg_White
c_venv_div_fg=$fg_SolarCyan

# Suffix segment colors
c_prompt_bg=""
c_error_bg=$bg_SolarBase02
c_error_fg=$fg_SolarRed


# =============================================================================
# SEGMENT GLYPHS
# -----------------------------------------------------------------------------

# https://unicode-table.com/en/

g_div=$'\uE0B0'          # solid triangle; requires powerline font
g_prompt="${g_div} "
g_exitPrompt="${g_div} "
g_thinDiv=$'\uE0B1'      # thin arrow; requires powerline font
g_gitBranch=$'\uE0A0'    # branch symbol; alternatives: 2325, 2387


# =============================================================================
# HELPER FUNCTIONS
# -----------------------------------------------------------------------------

_build_div_segment() {
  local c_fg=$previous_bg c_bg=$1

  if [[ $prior_segment -eq $_true ]]; then
    echo "${c_bg}${c_fg}${g_exitPrompt}${ResetColor}"
  else
    echo "${c_bg} "
  fi
}


# =============================================================================
# FUNCTIONS
# -----------------------------------------------------------------------------

build_cwd() {
  local div working_dir pathdirs numdirs shortpwd=""

  div="${c_cwd_bg}${previous_bg}${g_div}${ResetColor}"

  # replace $HOME with tilde; replace slashes with newlines
  working_dir="$(echo "$PWD" | sed "s|^${HOME}|~|" | sed "s|/|\n|g")"
  # split pwd on newlines into an array
  #     (can't use the -d option; requires Bash > 4.4)
  readarray -t pathdirs <<< "$working_dir"
  # count array size to get number of directories
  numdirs="${#pathdirs[@]}"
  # decrement array size to avoid parsing cwd (which is used later)
  ((numdirs--))

  # iterate through directories to get the first letter of each directory name
  if [[ "$numdirs" -gt 0 ]]; then
    for ((i=0;i<"${numdirs}";i++)); do
      shortpwd="${shortpwd}${pathdirs[$i]:0:1} ${g_thinDiv} "
    done
  fi

  # add the cwd back in so it's shown with a full name
  shortpwd="${shortpwd}${pathdirs[$numdirs]}"
  _ps1_cwd="${div}${c_cwd_bg}${c_cwd_fg} ${shortpwd} ${ResetColor}"

  previous_bg=$c_cwd_div_fg
  prior_segment=$_true
}

build_date() {
  local div datestamp

  div="$(_build_div_segment "$c_date_bg")"
  datestamp="$(date +"${date_format}")"
  _ps1_date="${div}${c_date_bg}${c_date_fg}${datestamp} ${ResetColor}"

  previous_bg=$c_date_div_fg
  prior_segment=$_true
}

build_exitstatus() {
  local div
  _ps1_exit=""

  if [[ $LAST_EXIT_STATUS -ne 0 ]]; then
    div="$(_build_div_segment "$c_error_bg")"
    _ps1_exit="${div}${c_error_bg}${c_error_fg}${LAST_EXIT_STATUS} ${ResetColor}"
  fi
}

build_git() {
  local div git_prompt prefix
  _ps1_git=""

  git_prompt="$(__git_ps1 "%s")"

  if [[ -n $git_prompt ]]; then
    if grep -Eq "[*|+|%]" <<< "$git_prompt"; then
      prefix="${c_git_bg}${c_gitDirty_fg}${g_gitBranch}"
    else
      prefix="${c_git_bg}${c_gitClean_fg}${g_gitBranch}"
    fi

    _ps1_git="${prefix} ${git_prompt} ${ResetColor}"

    div="$(_build_div_segment "$c_git_bg")"
    previous_bg=$c_git_div_fg
    prior_segment=$_true
  fi

  _ps1_git="${div}${_ps1_git}"
}

build_hostname() {
  local div
  _ps1_hostname=""

  if [[ ( -n "$SSH_CONNECTION" && -z "$TMUX" ) ]] || [[ "$show_hostname" -eq 1 ]]; then
    div="$(_build_div_segment "$c_hostname_bg")"
    _ps1_hostname="${div}${c_hostname_bg}${c_hostname_fg}\\h ${ResetColor}"

    previous_bg=$c_hostname_div_fg
    prior_segment=$_true
  fi
}

build_venv() {
  local div venv
  _ps1_venv=""

  if [[ -n $CONDA_DEFAULT_ENV ]]; then
    div="$(_build_div_segment "$c_venv_bg")"
    venv="${c_venv_bg}${c_venv_fg}${CONDA_DEFAULT_ENV} ${ResetColor}"
    _ps1_venv="${div}${venv}"

    previous_bg=$c_venv_div_fg
    prior_segment=$_true
  fi
}


# =============================================================================
# MAIN
# -----------------------------------------------------------------------------

__my_prompt() {
  # Capture the exit status from the last command
  LAST_EXIT_STATUS="$?"

  # Set initial segment status
  prior_segment=$_false

  # Save previous background color for dividers
  previous_bg=""

  build_hostname
  build_date
  build_cwd
  build_git
  build_venv
  build_exitstatus

  _system="${_ps1_hostname}${_ps1_date}"
  _environ="${_ps1_cwd}${_ps1_git}${_ps1_venv}"
  _shell="${_ps1_exit}"
  _suffix="${c_prompt_bg}${previous_bg}${g_prompt}${ResetColor}"

  export PS1="${_system}${_environ}${_shell}${_suffix}"
}

export -f __my_prompt